//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IQuotesClient {
    createQuote(command: CreateQuoteCommand): Observable<number>;
    getQuotes(): Observable<QuoteVm[]>;
}

@Injectable({
    providedIn: 'root'
})
export class QuotesClient implements IQuotesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createQuote(command: CreateQuoteCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Quotes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateQuote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateQuote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateQuote(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getQuotes(): Observable<QuoteVm[]> {
        let url_ = this.baseUrl + "/api/Quotes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetQuotes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetQuotes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuoteVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuoteVm[]>;
        }));
    }

    protected processGetQuotes(response: HttpResponseBase): Observable<QuoteVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QuoteVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IMoviesClient {
    getMovies(): Observable<Movie[]>;
}

@Injectable({
    providedIn: 'root'
})
export class MoviesClient implements IMoviesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getMovies(): Observable<Movie[]> {
        let url_ = this.baseUrl + "/api/Movies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMovies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMovies(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Movie[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Movie[]>;
        }));
    }

    protected processGetMovies(response: HttpResponseBase): Observable<Movie[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Movie.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICharactersClient {
    getCharacters(): Observable<Character[]>;
}

@Injectable({
    providedIn: 'root'
})
export class CharactersClient implements ICharactersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCharacters(): Observable<Character[]> {
        let url_ = this.baseUrl + "/api/Characters";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCharacters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCharacters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Character[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Character[]>;
        }));
    }

    protected processGetCharacters(response: HttpResponseBase): Observable<Character[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Character.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CreateQuoteCommand implements ICreateQuoteCommand {
    text?: string;
    movieId?: number | undefined;
    movieCreateInput?: MovieCreateInput | undefined;
    characterId?: number | undefined;
    characterCreateInput?: CharacterCreateInput | undefined;

    constructor(data?: ICreateQuoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.movieId = _data["movieId"];
            this.movieCreateInput = _data["movieCreateInput"] ? MovieCreateInput.fromJS(_data["movieCreateInput"]) : <any>undefined;
            this.characterId = _data["characterId"];
            this.characterCreateInput = _data["characterCreateInput"] ? CharacterCreateInput.fromJS(_data["characterCreateInput"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateQuoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateQuoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["movieId"] = this.movieId;
        data["movieCreateInput"] = this.movieCreateInput ? this.movieCreateInput.toJSON() : <any>undefined;
        data["characterId"] = this.characterId;
        data["characterCreateInput"] = this.characterCreateInput ? this.characterCreateInput.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateQuoteCommand {
    text?: string;
    movieId?: number | undefined;
    movieCreateInput?: MovieCreateInput | undefined;
    characterId?: number | undefined;
    characterCreateInput?: CharacterCreateInput | undefined;
}

export class MovieCreateInput implements IMovieCreateInput {
    displayName?: string;
    yearOfPublish?: number;

    constructor(data?: IMovieCreateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.yearOfPublish = _data["yearOfPublish"];
        }
    }

    static fromJS(data: any): MovieCreateInput {
        data = typeof data === 'object' ? data : {};
        let result = new MovieCreateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["yearOfPublish"] = this.yearOfPublish;
        return data;
    }
}

export interface IMovieCreateInput {
    displayName?: string;
    yearOfPublish?: number;
}

export class CharacterCreateInput implements ICharacterCreateInput {
    displayName?: string;

    constructor(data?: ICharacterCreateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): CharacterCreateInput {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterCreateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface ICharacterCreateInput {
    displayName?: string;
}

export class QuoteVm implements IQuoteVm {
    text?: string;
    movie?: MovieVm;
    character?: CharacterVm;
    createdBy?: string;
    userName?: string;

    constructor(data?: IQuoteVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.movie = _data["movie"] ? MovieVm.fromJS(_data["movie"]) : <any>undefined;
            this.character = _data["character"] ? CharacterVm.fromJS(_data["character"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): QuoteVm {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["movie"] = this.movie ? this.movie.toJSON() : <any>undefined;
        data["character"] = this.character ? this.character.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["userName"] = this.userName;
        return data;
    }
}

export interface IQuoteVm {
    text?: string;
    movie?: MovieVm;
    character?: CharacterVm;
    createdBy?: string;
    userName?: string;
}

export class MovieVm implements IMovieVm {
    displayName?: string;
    yearOfPublish?: number;

    constructor(data?: IMovieVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.yearOfPublish = _data["yearOfPublish"];
        }
    }

    static fromJS(data: any): MovieVm {
        data = typeof data === 'object' ? data : {};
        let result = new MovieVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["yearOfPublish"] = this.yearOfPublish;
        return data;
    }
}

export interface IMovieVm {
    displayName?: string;
    yearOfPublish?: number;
}

export class CharacterVm implements ICharacterVm {
    displayName?: string;

    constructor(data?: ICharacterVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): CharacterVm {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface ICharacterVm {
    displayName?: string;
}

export abstract class BaseEntity implements IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                this.domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    this.domainEvents!.push(BaseEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];
}

export class Movie extends BaseEntity implements IMovie {
    displayName?: string;
    yearOfPublish?: number;
    quotes?: Quote[];

    constructor(data?: IMovie) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.yearOfPublish = _data["yearOfPublish"];
            if (Array.isArray(_data["quotes"])) {
                this.quotes = [] as any;
                for (let item of _data["quotes"])
                    this.quotes!.push(Quote.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Movie {
        data = typeof data === 'object' ? data : {};
        let result = new Movie();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["yearOfPublish"] = this.yearOfPublish;
        if (Array.isArray(this.quotes)) {
            data["quotes"] = [];
            for (let item of this.quotes)
                data["quotes"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IMovie extends IBaseEntity {
    displayName?: string;
    yearOfPublish?: number;
    quotes?: Quote[];
}

export abstract class BaseAuditableEntity extends BaseEntity implements IBaseAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBaseAuditableEntity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static override fromJS(data: any): BaseAuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseAuditableEntity' cannot be instantiated.");
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseAuditableEntity extends IBaseEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;
}

export class Quote extends BaseAuditableEntity implements IQuote {
    text?: string;
    movieId?: number;
    characterId?: number;
    movie?: Movie;
    character?: Character;

    constructor(data?: IQuote) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.text = _data["text"];
            this.movieId = _data["movieId"];
            this.characterId = _data["characterId"];
            this.movie = _data["movie"] ? Movie.fromJS(_data["movie"]) : <any>undefined;
            this.character = _data["character"] ? Character.fromJS(_data["character"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Quote {
        data = typeof data === 'object' ? data : {};
        let result = new Quote();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["movieId"] = this.movieId;
        data["characterId"] = this.characterId;
        data["movie"] = this.movie ? this.movie.toJSON() : <any>undefined;
        data["character"] = this.character ? this.character.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IQuote extends IBaseAuditableEntity {
    text?: string;
    movieId?: number;
    characterId?: number;
    movie?: Movie;
    character?: Character;
}

export class Character extends BaseEntity implements ICharacter {
    displayName?: string;

    constructor(data?: ICharacter) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
        }
    }

    static override fromJS(data: any): Character {
        data = typeof data === 'object' ? data : {};
        let result = new Character();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        super.toJSON(data);
        return data;
    }
}

export interface ICharacter extends IBaseEntity {
    displayName?: string;
}

export abstract class BaseEvent implements IBaseEvent {

    constructor(data?: IBaseEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BaseEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBaseEvent {
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}